---
output: html_document
editor_options: 
  chunk_output_type: console
---


```{r}
# load libraries
library(tidyverse)
library(here)
library(knitr)
library(kableExtra)
library(plotly)
library(ggiraph)
library(ggflags) # circle flags - use install.packages("devtools") then devtools::install_github("rensa/ggflags") if needed
library(ggimage) # rectangle flags
library(countrycode)
library(ggflags)
library(dplyr)
library(gganimate)
```

```{r}
# load library
fao_emissions <- read_csv("/Users/npepper/MEDS/capstone/data/data-raw/full_emissions_fao_species.csv")
```

```{r}
# Explore data
print(unique(fao_emissions$name_en))
```


```{r}
# Calc top species
top_species <- fao_emissions |>
  group_by(name_en) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  head(20)
```

```{r}
# Calc top major groups
top_major_groups <- fao_emissions |>
  group_by(major_group) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  head(20)
```


```{r}
# Calc top isscap
top_iss_groups <- fao_emissions |>
  group_by(isscaap_group) |>
  filter(isscaap_group != "no_fao_species_catch_data") |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  head(10)
```

```{r}
# Calc top countries
top_flags <- fao_emissions |>
  group_by(flag) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions))
```


```{r}
top_flags <- fao_emissions |>
  filter(!flag %in% c("UNK", NA),
         year == 2024) |>
  group_by(flag) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  slice_head(n = 10) |>
  mutate(
    iso2 = tolower(countrycode(flag, origin = "iso3c", destination = "iso2c")),
    country_name = countrycode(flag, origin = "iso3c", destination = "country.name"))

write_rds(top_flags, "top_flags.rds")

```


### Plot top countries
I dropped NA and UNK
Question: Should we set NA to UNK

NA 162387172
UNK 26566516

```{r}
# ---- Step 1: Calculate Top 10 Countries by Emissions ----
top_flags <- fao_emissions |>
  filter(!flag %in% c("UNK", NA),
         year == 2024) |>
  group_by(flag) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  slice_head(n = 10) |>
  mutate(
    iso2 = tolower(countrycode(flag, origin = "iso3c", destination = "iso2c")),
    country_name = countrycode(flag, origin = "iso3c", destination = "country.name"))

# ---- Step 2: Plot ----
ggplot(data = top_flags) +
  geom_col(
    aes(x = sum_emissions, y = reorder(country_name, sum_emissions)),
    fill = "#08C4E5"
  ) +
  geom_flag(
    aes(x = 0, y = reorder(country_name, sum_emissions), country = iso2),
    size = 15
  ) +
geom_text(
  aes(x = sum_emissions + 0.09 * max(sum_emissions, na.rm = TRUE),
      y = reorder(country_name, sum_emissions),
      label = paste0(comma(sum_emissions), " MT")),
  color = "white",
  family = "Roboto",
  fontface = "bold",
  size = 4) +
 theme_void() +
theme(
  legend.position = "none",
  axis.title.x = element_blank(),
  axis.text.y = element_text(color = "white",
                             family = "Roboto",
                             face = "bold",
                             size = 14,
                             hjust = 1,
                             margin = margin(r = -10)),
  panel.background = element_rect(fill = "#053762", color = NA),
  plot.background = element_rect(fill = "#053762", color = NA)) +

  expand_limits(
    x = c(-0.05 * max(top_flags$sum_emissions),
          1.2 * max(top_flags$sum_emissions))
  )
```

```{r}
# ---- Step 1: Calculate Emissions per Unit Catch ----
top_flags_eiu <- fao_emissions |>
  filter(!flag %in% c("UNK", NA)) |>
  group_by(flag) |>
  summarize(
    sum_emissions = sum(total_co2_mt, na.rm = TRUE),
    sum_catch = sum(country_total_tons_by_species, na.rm = TRUE),
    emissions_per_ton = sum_emissions / sum_catch
  ) |>
  arrange(desc(emissions_per_ton)) |>
  slice_head(n = 10) |>
  mutate(
    iso2 = tolower(countrycode(flag, origin = "iso3c", destination = "iso2c")),
    country_name = countrycode(flag, origin = "iso3c", destination = "country.name")
  )

# ---- Step 2: Plot ----
ggplot(data = top_flags_eiu) +
  geom_col(
    aes(x = emissions_per_ton, y = reorder(country_name, emissions_per_ton)),
    fill = "#08C4E5"
  ) +
  geom_flag(
    aes(x = 0, y = reorder(country_name, emissions_per_ton), country = iso2),
    size = 15
  ) +
  geom_text(
    aes(
      x = emissions_per_ton + 0.09 * max(emissions_per_ton, na.rm = TRUE),
      y = reorder(country_name, emissions_per_ton),
      label = round(emissions_per_ton, 2)
    ),
    color = "white",
    family = "Roboto",
    fontface = "bold",
    size = 4
  ) +
  labs(x = "Emissions per Ton of Catch (tCO₂/ton)") +
  theme_void() +
  theme(
    legend.position = "none",
    axis.title.x = element_text(color = "white", family = "Roboto", face = "bold", size = 18),
    axis.text.y = element_text(color = "white", family = "Roboto", face = "bold", size = 14),
    panel.background = element_rect(fill = "#053762", color = NA),
    plot.background = element_rect(fill = "#053762", color = NA)
  ) +
  expand_limits(
    x = c(-0.05 * max(top_flags_eiu$emissions_per_ton),
          1.2 * max(top_flags_eiu$emissions_per_ton))
  )
```


```{r}
# --- For only significant countries: 

# ---- Step 1: Calculate Emissions per Unit Catch with Filtering ----
top_flags_eiu <- fao_emissions |>
  filter(!flag %in% c("UNK", NA)) |>
  group_by(flag) |>
  summarize(
    sum_emissions = sum(total_co2_mt, na.rm = TRUE),
    sum_catch = sum(country_total_tons_by_species, na.rm = TRUE),
    emissions_per_ton = sum_emissions / sum_catch
  ) |>
  filter(sum_catch > 10000) |>  # filter out tiny catch volumes
  arrange(desc(emissions_per_ton)) |>
  slice_head(n = 10) |>
  mutate(
    iso2 = tolower(countrycode(flag, origin = "iso3c", destination = "iso2c")),
    country_name = countrycode(flag, origin = "iso3c", destination = "country.name")
  )


# ---- Step 2: Plot ----
ggplot(data = top_flags_eiu) +
  geom_col(
    aes(x = emissions_per_ton, y = reorder(country_name, emissions_per_ton)),
    fill = "#08C4E5"
  ) +
  geom_flag(
    aes(x = 0, y = reorder(country_name, emissions_per_ton), country = iso2),
    size = 15
  ) +
  geom_text(
    aes(
      x = emissions_per_ton + 0.09 * max(emissions_per_ton, na.rm = TRUE),
      y = reorder(country_name, emissions_per_ton),
      label = round(emissions_per_ton, 2)
    ),
    color = "white",
    family = "Roboto",
    fontface = "bold",
    size = 4
  ) +
  labs(x = "Emissions per Ton of Catch (tCO₂/ton)") +
  theme_void() +
  theme(
    legend.position = "none",
    axis.title.x = element_text(color = "white", family = "Roboto", face = "bold", size = 18),
    axis.text.y = element_text(color = "white", family = "Roboto", face = "bold", size = 14),
    panel.background = element_rect(fill = "#053762", color = NA),
    plot.background = element_rect(fill = "#053762", color = NA)
  ) +
  expand_limits(
    x = c(-0.05 * max(top_flags_eiu$emissions_per_ton),
          1.2 * max(top_flags_eiu$emissions_per_ton))
  )
```


# Isscap group plots

```{r}
# ---- Step 1: Calculate Top 10 Countries by Emissions ----
top_isscaap <- fao_emissions |>
  filter(isscaap_group != "no_fao_species_catch_data",
         isscaap_group != "Marine fishes not identified") |>
  group_by(isscaap_group) |>
  summarize(sum_emissions = sum(total_co2_mt, na.rm = TRUE)) |>
  arrange(desc(sum_emissions)) |>
  slice_head(n = 10) 

# ---- Step 2: Plot ----
ggplot(data = top_isscaap) +
  geom_col(
    aes(x = sum_emissions, y = reorder(isscaap_group, sum_emissions)),
    fill = "#08C4E5"
  )  +
geom_text(
  aes(x = sum_emissions + 0.09 * max(sum_emissions, na.rm = TRUE),
      y = reorder(isscaap_group, sum_emissions),
      label = paste0(comma(sum_emissions), " MT")),
  color = "white",
  family = "Roboto",
  fontface = "bold",
  size = 4) +
 theme_void() +
theme(
  legend.position = "none",
  axis.title.x = element_blank(),
  axis.text.y = element_text(color = "white",
                             family = "Roboto",
                             face = "bold",
                             size = 14,
                             hjust = 1,
                             margin = margin(r = -10)),
  panel.background = element_rect(fill = "#053762", color = NA),
  plot.background = element_rect(fill = "#053762", color = NA)) +

  expand_limits(
    x = c(-0.05 * max(top_isscaap$sum_emissions),
          1.2 * max(top_isscaap$sum_emissions))
  )
```



```{r}

species_emissions <- readRDS("data/top_isscaap.rds") |>
  filter(year == 2016)
  
  
    ggplot(data = top_isscaap) +
      geom_col(aes(x = x_var,
                   y = reorder(isscaap_group, sum_emissions)),
               fill = "#08C4E5") +
      # Add images just to the left of bars
      geom_image(
        aes(x = -0.05 * max_x,  # lock to left side
            y = reorder(isscaap_group, sum_emissions),
            image = image),
        size = 0.05,  # screen-relative (0–1), so it scales with screen
        by = "height"  # ensures size is relative to height of the plot area
      ) +  # Adjust multiplier
     
      geom_text(aes(x = x_var + 0.09 * max_x,
                    y = reorder(isscaap_group, sum_emissions),
                    label = x_label),
                color = "white",
                size = 7) +
      labs(title = "Annual CO₂ Emissions by ISSCAAP Group") +
      theme_void() +
      theme(
        legend.position = "none",
        title = element_text(color = "white",
                             family = "Roboto",
                             face = "bold",
                             size = 24),
        axis.title.x = element_blank(),
        axis.text.y = element_text(color = "white",
                                   size = 22,
                                   hjust = 1,
                                   margin = margin(r = -5)),
        panel.background = element_rect(fill = "#053762", color = NA),
        plot.background = element_rect(fill = "#053762", color = NA)
      ) +
      expand_limits(x = c(-0.1 * max_x, 1.2 * max_x))
```



